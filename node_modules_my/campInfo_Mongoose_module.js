var mongoose=require("mongoose");
mongoose.set('useFindAndModify', false);
var passport;
var passportLocal;
var passportLocalMongoose;
var mHOST="114.88.37.13";
//var mHOST="192.168.1.5";
var mPORT=27017;

var commentSchema={
  author:{
    id:{type:mongoose.Schema.Types.ObjectId,ref:"Post"},
    username:String
  },
  content:String,
};

var _commentModel=mongoose.model("comment",mongoose.Schema(commentSchema));
var campSchema={
   author:{
    id:{type:mongoose.Schema.Types.ObjectId,ref:"Post"},
    username:String},
    name:String,
    image:String,
    description:String,
    price:String,
    comments:[{type:mongoose.Schema.Types.ObjectId,ref:"comment"}],//ref is model name
    isImageLocal:Boolean
  };
var _campModel=mongoose.model("camp",mongoose.Schema(campSchema));
var User_Schema=new mongoose.Schema({
  username:String,
  password:String
});
var _user_model;

var fakeCamps=[
    {name:"camp1",image:"/public/images/camp1.jpg",description:"dscpt1",isImageLocal:true},
    {name:"camp2",image:"/public/images/camp2.jpg",description:"dscpt2",isImageLocal:true},
    {name:"camp3",image:"/public/images/camp1.jpg",description:"dscpt3",isImageLocal:true},
    {name:"camp4",image:"https://tse4-mm.cn.bing.net/th?id=OIP.e3luDHVso-kjQpF15AWziwHaFf&w=234&h=170&c=7&o=5&pid=1.7",description:"dscpt4",isImageLocal:false},
    {name:"camp5",image:"/public/images/camp1.jpg",description:"dscpt5",isImageLocal:true},
    {name:"camp6",image:"https://tse4-mm.cn.bing.net/th?id=OIP.7bBghxhVYaA2Uaj7GYeFlgHaE9&w=242&h=161&c=7&o=5&pid=1.7",description:"dscpt6",isImageLocal:false},
    {name:"camp7",image:"/public/images/camp2.jpg",description:"dscpt7",isImageLocal:true},
    {name:"camp8",image:"https://tse4-mm.cn.bing.net/th?id=OIP.kH1EVWetTHGbRE_5kONGXwHaE8&w=237&h=160&c=7&o=5&pid=1.7",description:"dscpt8",isImageLocal:false},
    {name:"camp9",image:"/public/images/camp2.jpg",description:"dscpt9",isImageLocal:true}
  ];
  var fakeComments=[
   { auther:"CmAtr1",content:"CmCt1"},
   { auther:"CmAtr2",content:"CmCt2"},
   { auther:"CmAtr3",content:"CmCt3"},
   { auther:"CmAtr4",content:"CmCt4"},
   { auther:"CmAtr5",content:"CmCt5"}
  ];
module.exports={
    mongoUrl:"mongodb://"+mHOST+":"+mPORT+"/campInfo",
    connection:function(){
     mongoose.connect(this.mongoUrl,{useNewUrlParser:true});
     mongoose.connection.on('connected',
             function(){
             console.log("mongoose OK");
            });
      mongoose.connection.on('error',
             function(err){
             console.log("mongoose Error :"+err);
            });
    },
    campModel:function(){
        return _campModel;
    },
    commentModel:function(){
      return _commentModel;
  },
    userModel:function(){
    User_Schema.plugin(passportLocalMongoose);
    _user_model =mongoose.model("User",User_Schema);
    return _user_model;
   },
   linkAuthModule(_passport,_passportLocal,_passportLocalMongoose){
    passport=_passport;
    passportLocal=_passportLocal;
    passportLocalMongoose=_passportLocalMongoose;
   },
   getMongoose :function(){return mongoose; },
   setupUserPassport:function(User_Model){
    passport.use(new passportLocal(User_Model.authenticate()));
    passport.serializeUser(User_Model.serializeUser());
    passport.deserializeUser(User_Model.deserializeUser());
   },
    addNewCommentAtCampByUserToDB(campPara,commentContent,user,callBack){
      _campModel.findOne(campPara,function(err,_campFound){
        if(err){console.log(err);}
        else{
          _commentModel.create(
            {
            author:{
              id:user.id,
              username:user.username
            },
            content:commentContent,
            },
          function(err,commentCreated){
                //associate with camp
                _campFound.comments.push(commentCreated);
                _campFound.save(function(err){
                  if(err){console.log(err);}
                  else{
                    console.log("_campFound save success");
                    callBack();
                  }
                });
              //associate with user

              });
          }
      });
    },
    addNewCampByUserToDB:function(campInfo,user,callBackErr,callBackOK){
      _campModel.create(
        {
          author:{
            id:user.id,
            username:user.username
          },
           name:campInfo.name,
           image:campInfo.image,
           description:campInfo.description,
           price:campInfo.price,
           comments:[],//ref is model name
           isImageLocal:false
         }
        ,function(err,_camp){
          if(err){
            console.log(camp);
            console.log("camp create error :"+err);
            callBackErr();
          }else{
            console.log("A camp create :");
            console.log(_camp);
            callBackOK();
          }
      });
    },
    addAllFakeCampToDB:function(callBack){
      fakeCamps.forEach(
            function (camp) {
              _campModel.create(
                camp,
                callBack
              );
            });
    },
    addNewCommentAtCampToDB:function(campPara,newComment,callBack){
      _campModel.findOne(campPara,function(err,_campFound){
        if(err){console.log(err);}
        else{
          _commentModel.create(newComment,
              function(err,commentCreated){
                _campFound.comments.push(commentCreated);
                _campFound.save(function(err){
                  if(err){console.log(err);}
                  else{
                    console.log("_campFound save success");
                    callBack();
                  }
                });
              });
          }
      });
 },
    addAllFakeCommentAtCampToDB:function(campPara){
      //maybe sync problem with using forEach
       for(var i=0;i<fakeComments.length;i++){
        this.addNewCommentAtCampToDB(campPara,fakeComments[i]);
       }
}

}